---
type: posts
title: "Recursion in Python"
date: 2017-05-01 13:00:00
categories: math and cs
---
Python wasn't the first language I learned but it's the one I use most often in my own projects because it is quick and easy to work with. There's very little translation involved in turning a design from pseudocode into a working program. If I have a small idea that I want to test, I can just open the interpreter and go. And the syntax is free of brackets and semicolons, making large blocks of code easy to read. This last point is the reason why I think it's a great language to demonstrate recursion. Recursive functions aren't more time or space efficient than their iterative counterparts, but they do make for elegant and easy-to-read code.

The following is a subset of problems from my Data Structures and Advanced Programming class. They represent the sort of problems that I enjoy solving, problems that lend themselves to a succinct answer that requires a bit of clever thinking. In all of these problems, the hard part is coming up with a base case and a recursive structure.

<h2>1. Sum of Digits</h2>
The goal here is to write a recursive function that prints out the sum of the digits of an integer written in base 10. So for example, f(123) = 6. Here a good knowledge of place value makes for an easy recursive solution. It's easy to read off the ones digit by taking the number modulo 10 and add it to a sum. Then dividing by 10 can shift the digits one place to the right. Repeating this process yields a nice recursive algorithm. Finally, for the reason that 1 = 1 mod 10 and -1 = 9 mod 10, it's easier to handle negative integers by just flipping the sign at the outset.
{% highlight python %}
def decimalDigitSum(n):
    # Handle the negative case
    if n < 0:
        n = -n
    if n < 10:
        return n
    else:
        return n % 10 + decimalDigitSum(n // 10)
{% endhighlight %}